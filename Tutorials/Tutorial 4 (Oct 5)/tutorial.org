#+TITLE: MECH 467 Tutorial 4
#+AUTHOR: Jasper Chan - 37467164

#+OPTIONS: toc:nil

#+LATEX_HEADER: \definecolor{bg}{rgb}{0.95,0.95,0.95}
#+LATEX_HEADER: \setminted{frame=single,bgcolor=bg,samepage=true}
#+LATEX_HEADER: \setlength{\parindent}{0pt}
#+LATEX_HEADER: \usepackage{float}
#+LATEX_HEADER: \usepackage{svg}
#+LATEX_HEADER: \usepackage{cancel}
#+LATEX_HEADER: \usepackage{amssymb}
#+LATEX_HEADER: \usepackage{mathtools, nccmath}
#+LATEX_HEADER: \newcommand{\Lagr}{\mathcal{L}}
#+LATEX_HEADER: \newcommand{\Lagri}{\mathcal{L}^{-1}}
#+LATEX_HEADER: \renewcommand\arraystretch{1.2}

#+begin_src ipython :session :results none :exports none
import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
from IPython.display import set_matplotlib_formats
%matplotlib inline
set_matplotlib_formats('svg')
#+end_src
#+begin_src ipython :session :results none :exports none
import IPython
from tabulate import tabulate

class OrgFormatter(IPython.core.formatters.BaseFormatter):
    def __call__(self, obj):
        try:
            return tabulate(obj, headers='keys',
                            tablefmt='orgtbl', showindex='always')
        except:
            return None

ip = get_ipython()
ip.display_formatter.formatters['text/org'] = OrgFormatter()
#+end_src
* Draw the bode plot for the first order system $G_p(s) = \dfrac{50}{s + 10}$
Given a transfer function of the form:
\begin{align*}
G(s) &= \frac
{(s + z_1)(s + z_2)...(s + z_m)}
{(s + p_1)(s + p_2)...(s + p_n)}
& 
n > p
\end{align*}
The frequency response can be evaluated buy providing an input $j\omega$ to the system.
The resultant magnitude and phase lag is given by:
\begin{align*}
|G(j\omega)| &= 
\frac
{\sqrt{\omega^2 + z_1^2}\sqrt{\omega^2 + z_2^2}...\sqrt{\omega^2 + z_m^2}}
{\sqrt{\omega^2 + p_1^2}\sqrt{\omega^2 + p_2^2}...\sqrt{\omega^2 + p_n^2}} \\
\angle G(j\omega) &=
\left(\tan^{-1}\frac{\omega}{z_1} + \tan^{-1}\frac{\omega}{z_2} + ... + \tan^{-1}\frac{\omega}{z_m}\right)
- \left(\tan^{-1}\frac{\omega}{p_1} + \tan^{-1}\frac{\omega}{p_2} + ... + \tan^{-1}\frac{\omega}{p_n}\right)
\end{align*}

For our given transfer function, we get:
\begin{align}
|G_p(j\omega)| &= \frac{50}{\sqrt{\omega^2 + 10^2}} \\
\angle G_p(j\omega) &= - \tan^{-1}\frac{\omega}{10}
\end{align}

Let's define these functions:
#+begin_src ipython :session :results none :exports code
def mag(o):
    return 50/np.sqrt(o**2 + 10**2)
def phase(o):
    return (180/np.pi)*(-np.arctan(o/10))
#+end_src
Calculating some values:
#+begin_src ipython :session :results drawer :exports both
omega = np.logspace(-1, 3, 5)
mags = mag(omega)
db_mags = 20*np.log10(mags)
phases = phase(omega)
pd.DataFrame({
    "omega (rad/s)": omega,
    "magnitude": mags,
    "magnitude (dB)": db_mags,
    "phase (deg)": phases,
    })
#+end_src

#+RESULTS:
:results:
# Out[53]:
|    |   omega (rad/s) |   magnitude |   magnitude (dB) |   phase (deg) |
|----+-----------------+-------------+------------------+---------------|
|  0 |             0.1 |   4.99975   |         13.979   |     4.99975   |
|  1 |             1   |   4.97519   |         13.9362  |     4.97519   |
|  2 |            10   |   3.53553   |         10.9691  |     3.53553   |
|  3 |           100   |   0.497519  |         -6.06381 |     0.497519  |
|  4 |          1000   |   0.0499975 |        -26.021   |     0.0499975 |
:end:


Plotting our functions:
#+begin_src ipython :session :results drawer :exports both
omega = np.logspace(-1, 3)
ax1 = plt.subplot(211)
plt.plot(omega, 20*np.log10(mag(omega)))
plt.xscale('log')
plt.setp(ax1.get_xticklabels(), visible=False)

ax2 = plt.subplot(212, sharex=ax1)
_ = plt.plot(omega, phase(omega))
#+end_src

#+RESULTS:
:results:
# Out[102]:
[[file:./obipy-resources/xviZ3Z.svg]]
:end:

For a first order system it can be seen that the magnitude drops at 20 dB per decade after the root.
The phase at the root is exactly -45 degrees between two asymptotes to 0 and -90 degrees.
* Draw the bode plot for the second order system with real poles $G_p(s) = \dfrac{10^6}{s^2 + 10100s + 10^6}$
Using the quadratic formula to solve for the poles:
\begin{align}
x &= \frac{-b \pm \sqrt{b^2 - 4ac}}{2a} \\
&= \frac{-(10100) \pm \sqrt{(10100)^2 - 4(1)(10^6)}}{2(1)} \\
&= -100, 10000
\end{align}
\begin{equation}
G_p(s) = \frac{10^6}{(s + 100)(s + 10000)}
\end{equation}
Plugging in $j\omega$ and finding our magnitude and phase response:
\begin{align}
|G_p(j\omega)| &= \frac{10^6}{\sqrt{\omega^2 + 100^2}\sqrt{\omega^2 + 10000^2}} \\
\angle G_p(j\omega) &= -\tan^{-1}\frac{\omega}{100} - \tan^{-1}\frac{\omega}{10000}
\end{align}
Let's define these functions
#+begin_src ipython :session :results none :exports code
def mag(o):
    return (10**6)/(np.sqrt(o**2 + 100**2)*np.sqrt(o**2 + 10000**2))
def phase(o):
    return (180/np.pi)*(-np.arctan(o/100) - np.arctan(o/10000))
#+end_src

Calculating some values:
#+begin_src ipython :session :results drawer :exports both
omega = np.logspace(-1, 5, 7)
mags = mag(omega)
db_mags = 20*np.log10(mags)
phases = phase(omega)
pd.DataFrame({
    "omega (rad/s)": omega,
    "magnitude": mags,
    "magnitude (dB)": db_mags,
    "phase (deg)": phases,
    })
#+end_src

Plotting our functions:
#+begin_src ipython :session :results none :exports both
omega = np.logspace(-1, 5)
ax1 = plt.subplot(211)
plt.plot(omega, 20*np.log10(mag(omega)))
plt.xscale('log')
plt.setp(ax1.get_xticklabels(), visible=False)

ax2 = plt.subplot(212, sharex=ax1)
_ = plt.plot(omega, phase(omega))
#+end_src

#+RESULTS:
:results:
# Out[6]:
[[file:./obipy-resources/BbJqLj.svg]]
:end:

* Draw the bode plot for the second order system with imaginary poles $G_p(s) = \dfrac{4}{s^2 + 0.5s + 4}$
Note that this transfer function can be viewed as an underdamped system with $\omega_n = 2$ and $\zeta = 0.125$ and $k = 4$ as per:
\begin{equation}
\frac{k}{s^2 + 2\zeta \omega_n s + \omega_n^2}
\end{equation}

We can start off by calculating the DC gain of the system:
\begin{equation}
\lim_{s \to 0} G_p(s) = 1 = \SI{0}{\decibel}
\end{equation}

So at low frequencies, the gain of the system is $\SI{0}{\decibel}$.
As we approach the $\omega_n$, the gain will actually rise, becaues $\zeta < 1$.
Past $\omega_n$, the gain will drop off at a rate of 40 decibels per decade since this is a second order system.

The phase in the system will be exactly -90 degrees at $\omega_n$, with asymptotes at 0 and -180 degrees.

