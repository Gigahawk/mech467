#+TITLE: MECH 467 Prelab 1:
#+AUTHOR: Jasper Chan - 37467164
#+SUBTITLE: Modeling and Identification of Motion Control Mechanism

#+OPTIONS: toc:nil

#+LATEX_HEADER: \definecolor{bg}{rgb}{0.95,0.95,0.95}
#+LATEX_HEADER: \setminted{frame=single,bgcolor=bg,samepage=true}
#+LATEX_HEADER: \setlength{\parindent}{0pt}
#+LATEX_HEADER: \usepackage{float}
#+LATEX_HEADER: \usepackage{svg}
#+LATEX_HEADER: \usepackage{cancel}

Note: when not specified, all units are SI without prefixes.
* Mathmatical Modeling
[[file:prelab1.svg]]
** Find the equivalent inertia of the system, using the law of mechanics and provided data in Table 1.
The equivalent inertia of the system is the sum of the inertias of the individual components.

The torque required to move a ball screw is given by Eq. 8-1 of Shigley's:
\begin{equation}\tag{8-1}
T_R =
\frac{F d_m}{2}
\left(
    \frac{l + \pi f d_m}{\pi d_m - f l}
\right)
\end{equation}
Where:
\begin{align*}
d_m &:= \text{average diameter of screw} \\
l &:= \text{lead of screw} \\
f &:= \text{friction coefficient between screw and nut}
\end{align*}

If we assume negligible friction between the screw and the nut, the above equation simplifies down to:
\begin{equation}
T = \frac{F l}{2 \pi}
\end{equation}
Since we have a single start screw, $l = h_p$, therefore: 
#+NAME: eq:torque_screw_1
\begin{equation}
T = \frac{F h_p}{2 \pi}
\end{equation}

The force needed to move the table is given by:
\begin{equation}
F = ma = m_t \frac{h_p}{2 \pi} \ddot{\theta}
\end{equation}
Substituting into equation [[eq:torque_screw_1]] we get:
\begin{equation}
T = m_t
\left(
    \frac{h_p}{2 \pi}
\right)^2
\ddot{\theta}
\end{equation}
The equation for rotational inertia is given by:
\begin{equation}
T = J \ddot{\theta}
\end{equation}

With this, solve for the table inertia $J_t$:
\begin{equation}
J_t = 
m_t
\left(
    \frac{h_p}{2 \pi}
\right)^2
\end{equation}
Let's calculate this value:
#+begin_src matlab :session :exports both :results code
m_t = 20;
h_p = 0.02;

J_t = m_t * (h_p/(2*pi))^2;
ans = J_t
#+end_src

#+RESULTS:
#+begin_src matlab
0.00020264
#+end_src

We also need the rotational inertia of the screw $J_s$ itself.
Approximating the screw to be a cylinder with diameter $d_s$, we get:
\begin{equation}
J_s = \frac{1}{2} m_s r_s^2
\end{equation}

Let's calculate this value:
#+begin_src matlab :session :exports both :results code
d_s = 0.02;
rho_s = 7800;
L_s = 0.82;

r_s = d_s/2;
m_s = rho_s*pi*r_s^2*L_s;

J_s = 1/2*m_s*r_s^2;
ans = J_s
#+end_src

#+RESULTS:
#+begin_src matlab
0.00010047
#+end_src

Now we can combine these values with the given inertias to find the equivalent inerita of the whole system:
#+begin_src matlab :session :exports both :results code
J_m = 0.765E-4;
J_enc = 1.7E-4;
J_coup = 4E-5;
J_tach = 9.3212E-7;

J_eq = J_m + J_enc + J_coup + J_tach + J_t + J_s;
ans = J_eq
#+end_src

#+RESULTS:
#+begin_src matlab
0.00059054
#+end_src

** Find the transfer functions from $I_\text{in}(s)$ to $I_m(s)$, from $V_\text{in}(s)$ to $I_m(s)$ and from $I_m(s)$ to $\omega(s)$. Assume $T_d = 0$
<<sec:findtfr>>

Let:
\begin{align*}
S_g &:= \text{current sensor gain} \\
P(s) &:= \text{transfer function of the PWM amplifier} \\
E(s) &:= \text{transfer function of the motor windings} \\
K_t &:= \text{motor constant} \\
M(s) &:= \text{transfer function of the mechanical block} \\
K_b &:= \text{back emf constant}
\end{align*}

*** $I_\text{in}(s)$ to $I_m(s)$ (Electrical)
#+NAME: eq:iin_to_im
\begin{align}
I_m(s) &=
E(s)
\left(
    P(s)
    \left(
        I_\text{in}(s) - I_m(s)
    \right)
    - K_b M(s)
    \left(
        K_t I_m(s) - \cancelto{0}{T_d}
    \right)
\right) \nonumber \\
&=
E(s)
\left(
    P(s) I_\text{in}(s) - P(s) I_m(s)
    - K_b M(s) K_t I_m(s) 
\right) \nonumber \\
&=
E(s)
\left(
    I_\text{in}(s) P(s)
    - I_m(s)
    \left(
        K_b M(s) K_t  + P(s)
    \right)
\right) \nonumber \\
&=
I_\text{in}(s) P(s) E(s)
- I_m(s) E(s)
\left(
    K_b M(s) K_t  + P(s)
\right) \nonumber \\
\nonumber \\ 
\frac{I_m(s)}{I_\text{in}(s)}
&=
\frac
{P(s)E(s)}
{1 + E(s)\left(K_b M(s) K_t  + P(s)\right)}
\end{align}

*** $V_\text{in}(s)$ to $I_m(s)$

\begin{align}
I_\text{in}(s) &= S_g V_\text{in}(s) \nonumber \\
\nonumber \\
\frac{I_m(s)}{V_\text{in}(s)}
&= \frac{S_g I_m(s)}{I_\text{in}(s)}
\end{align}

*** $I_m(s)$ to $\omega(s)$
#+NAME: eq:im_to_omega
\begin{align}
\omega(s)
&=
M(s)
\left(
    I_m(s) K_t - \cancelto{0}{T_d}
\right) \nonumber \\
&=
M(s)I_m(s) K_t \nonumber \\
\nonumber \\
\frac{\omega(s)}{I_m(s)}
&= K_t M(s) 
\end{align}
** By using the two transfer functions found from [[sec:findtfr]], find a transfer function from the voltage command input to the drive's angular velocity (i.e. $V_\text{in}(s)$ to $\omega(s)$)
<<sec:findtfr2>>

\begin{align}
\omega(s)
&=
\frac{\omega(s)}{I_m(s)}
\frac{I_m(s)}{V_\text{in}(s)}
V_\text{in}(s) \nonumber \\
&=
K_t M(s)
\frac{S_g I_m(s)}{I_\text{in}(s)}
V_\text{in}(s) \nonumber \\
&=
K_t M(s)
S_g
\frac
{P(s)E(s)}
{1 + E(s)\left(K_b M(s) K_t  + P(s)\right)}
V_\text{in}(s) \nonumber \\
\nonumber \\
\frac{\omega(s)}{V_\text{in}(s)}
&=
K_t M(s)
S_g
\frac
{P(s)E(s)}
{1 + E(s)\left(K_b M(s) K_t  + P(s)\right)}
\end{align}
** Draw the block diagram with respect to disturbance input only (i.e. $V_\text{in} = 0$). Rearrange the block diagram such that $T_d$ appears as the input on the far left of the diagram. Keep the original blocks without combining them.
#+BEGIN_SRC matlab :session :exports none :results none :eval never-export
simulink
#+END_SRC

#+BEGIN_SRC matlab :session :exports results :results file
open_system('t_d');
print -dsvg -s 't_d.svg';
ans = 't_d.svg'
#+END_SRC

#+RESULTS:
[[file:t_d.svg]]

** Find the transfer function from disturbance input ($T_d(s)$) to angular velocity ($\omega(s)$) (i.e. assume $V_\text{in}(s) = 0$)
\begin{align}
I_m(s)
&=
E(s)
\left(
    -P(s) I_m(s)
    -K_b \omega(s)
\right) \nonumber \\
&=
-I_m(s)E(s) P(s)
-E(s) K_b \omega(s) \nonumber \\
&=
\frac
{-E(s) K_b \omega(s)}
{1 + E(s) P(s)} \nonumber \\
\nonumber \\
\omega(s)
&=
M(s)
\left(
    K_t I_m(s)
    - T_d(s)
\right) \nonumber \\
&=
M(s)
\left(
    -K_t
    \frac
    {E(s) K_b \omega(s)}
    {1 + E(s) P(s)}
    - T_d(s)
\right) \nonumber \\
&=
-\omega(s)
M(s)
K_t
\frac
{E(s) K_b}
{1 + E(s) P(s)}
- M(s) T_d(s) \nonumber \\
\nonumber \\
\frac{\omega(s)}{T_d(s)}
&=
-\frac
{M(s)}
{
    1 + 
    M(s)
    K_t
    \frac
    {E(s) K_b}
    {1 + E(s) P(s)}
}
\end{align}
\newpage
* Model Order Reduction
In this question use the approximate damping value of $\SI{0.006}{\newton\meter\per\radian\per\second}$ until the true damping and friction values are found by testing the actual machine.
** Substitute the parameters from Table 1 into the transfer function derived in [[sec:findtfr]] and [[sec:findtfr2]] and plot the step response and frequency response of the transfer function from $I_m(s)$ to $\omega(s)$. Find the bandwidth, DC gain and the rise time.
<<sec:resp_im_to_omega>>
Defining the block transfer functions in Eq. [[eq:im_to_omega]]:
\begin{equation}
M(s) = \frac{1}{J_\text{eq} s + B}
\end{equation}
Let's substitute in our values:
#+begin_src matlab :session :exports code :results none
K_t = 0.72;
B = 0.006;

M = tf([1], [J_eq B]);

im_to_omega = K_t*M;
#+end_src

Now we can plot the step response:
#+begin_src matlab :session :exports both :results file
f_name = 'step1.svg'
f = figure('visible', 'off', ...
           'Position', [0 0 600 300]);
step(im_to_omega);
saveas(f, f_name);
ans = f_name
#+end_src

#+RESULTS:
[[file:step1.svg]]

And the frequency response as well:
#+begin_src matlab :session :exports both :results file
f_name = 'bode1.svg'
f = figure('visible', 'off');
bode(im_to_omega);
saveas(f, f_name);
ans = f_name
#+end_src

#+RESULTS:
[[file:bode1.svg]]

We can also find the bandwidth:
#+begin_src matlab :session :exports both :results code
ans = bandwidth(im_to_omega);
#+end_src

#+RESULTS:
#+begin_src matlab
10.136
#+end_src

As well as the DC gain:
#+begin_src matlab :session :exports both :results code
ans = dcgain(im_to_omega);
#+end_src

#+RESULTS:
#+begin_src matlab
120
#+end_src

And finally the rise time:
#+begin_src matlab :session :exports both :results code
ans = stepinfo(im_to_omega).RiseTime;
#+end_src

#+RESULTS:
#+begin_src matlab
0.21624
#+end_src

** Find the frequency response of the transfer function from $I_\text{in}(s)$ to $I_m(s)$. Find the bandwidth and DC gain.
<<sec:resp_iin_to_im>>
*** Substitution
Defining the block transfer functions in Eq. [[eq:iin_to_im]]:
\begin{align}
P(s) &=
K_{vp} + \frac{K_{vi}}{s}
= \frac{K_{vp} s + K_{vi}}{s} \\ 
E(s) &=
\frac{1}{L_a s + R_a}
\end{align}
Let's substitute in our values:
#+begin_src matlab :session :exports code :results none
K_vp = 111.55;
K_vi = 3.0019E5;
K_t = 0.72;
K_b = 0.4173;
L_a = 0.0375;
R_a = 6.5;

P = tf([K_vp K_vi], [1 0]);
E = tf([1], [L_a R_a]);
iin_to_im = (P*E)/(1 + E*(K_b*M*K_t + P));
#+end_src
*** Response plots
Now we can plot the frequency response:
#+begin_src matlab :session :exports both :results file
f_name = 'bode2.svg'
f = figure('visible', 'off');
bode(iin_to_im);
saveas(f, f_name);
ans = f_name
#+end_src

#+RESULTS:
[[file:bode2.svg]]

*** Transfer function properties
Let's find the bandwidth:
#+begin_src matlab :session :exports both :results code
ans = bandwidth(iin_to_im);
#+end_src

#+RESULTS:
#+begin_src matlab
5119.4
#+end_src

And also find the DC gain:
#+begin_src matlab :session :exports both :results code
ans = dcgain(iin_to_im);
#+end_src

#+RESULTS:
#+begin_src matlab
1
#+end_src
** Plot the unit step response, unit ramp response and frequency response of transfer function from $V_\text{in}(s)$ to $\omega(s)$. Find the bandwidth, DC gain and rise time. It is better to scale the velocity response with the DC gain of the transfer function to plot both the input and output on the same scale. Compare the bandwidths and rise times obtained in [[sec:resp_im_to_omega]] and [[sec:resp_vin_to_omega]]. What do you notice? Also compare the DC gains obtained in [[sec:resp_im_to_omega]] and [[sec:resp_vin_to_omega]]. Find the steady state error for a ramp input response analytically, and compare against the simulation result. Note that the input $V$ in is in volts and the output $\omega$ is in radian/sec. In order to find the steady state error of the ramp input, you need to scale the transfer function by the DC gain of the system.
<<sec:resp_vin_to_omega>>
*** Substitution
Let's substitute in our values:
#+begin_src matlab :session :exports code :results none
S_g = 0.887;

vin_to_omega = K_t*M*S_g*iin_to_im;
#+end_src

*** Response plots
Now we can find the step response:
#+begin_src matlab :session :exports both :results file
f_name = 'step3.svg'
f = figure('visible', 'off', ...
           'Position', [0 0 600 300]);
step(vin_to_omega);
saveas(f, f_name);
ans = f_name
#+end_src

#+RESULTS:
[[file:step3.svg]]

And the ramp response:
#+begin_src matlab :session :exports both :results file
f_name = 'ramp3.svg'
f = figure('visible', 'off', ...
           'Position', [0 0 600 300]);
% Divide by s to get ramp response
% Divide by DC gain to get normalized response
% Use shorter time delta to show steadystate error
h = stepplot(vin_to_omega/tf('s')/dcgain(vin_to_omega),...
             1/tf('s'), 1);
p = getoptions(h);
p.Title.String = 'Ramp Response';
setoptions(h, p);
l = legend('Normalized response', 'Ramp input');
set(l, 'color', 'none', 'edgecolor', 'none');
saveas(f, f_name);

ans = f_name
#+end_src

#+RESULTS:
[[file:ramp3.svg]]

And finally the frequency response:
#+begin_src matlab :session :exports both :results file
f_name = 'bode3.svg'
f = figure('visible', 'off');
bode(vin_to_omega);
saveas(f, f_name);
ans = f_name
#+end_src

#+RESULTS:
[[file:bode3.svg]]

*** Transfer function properties
Let's find the bandwidth of the system:
#+begin_src matlab :session :exports both :results code
ans = bandwidth(vin_to_omega);
#+end_src

#+RESULTS:
#+begin_src matlab
10.119
#+end_src

As can be seen, the bandwidth is largely limited by the mechanical system, and the total bandwidth of the system is just slightly lower than that of just the mechanical system.

Let's find the DC gain:
#+begin_src matlab :session :exports both :results code
ans = dcgain(vin_to_omega);
#+end_src

#+RESULTS:
#+begin_src matlab
106.44
#+end_src

This matches our expectations, since this is the product of all of the gains of each subsystem.
#+begin_src matlab :session :exports both :results code
ans = S_g*dcgain(iin_to_im)*dcgain(im_to_omega);
#+end_src

#+RESULTS:
#+begin_src matlab
106.44
#+end_src

Let's find the rise time:
#+begin_src matlab :session :exports both :results code
ans = stepinfo(im_to_omega).RiseTime;
#+end_src

#+RESULTS:
#+begin_src matlab
0.21624
#+end_src

The rise time of the whole system is limited by the mechanical system, in this case the electrical subsystem has negligible rise time in the context of the whole system.
*** Steady state error analysis
**** Simulation approach

Let's find the steady state error of the system in simulation:
#+begin_src matlab :session :exports both :results code
t = 10000;
% Divide by s to get ramp response
% Divide by DC gain to get normalized response
y1 = step(vin_to_omega/tf('s')/dcgain(vin_to_omega), t);
y2 = step(1/tf('s'), t);

ans = y2(end) - y1(end)
#+end_src

#+RESULTS:
#+begin_src matlab
0.098612
#+end_src
**** Analytical approach

Let's first get the numerical coefficients for $\frac{\omega(s)}{V_\text{in}(s)}$ (with gain normalized to unity).
#+begin_src matlab :session :exports both :results code
[num, den] = tfdata(vin_to_omega/dcgain(vin_to_omega));

ans = [num; den]
#+end_src

#+RESULTS:
#+begin_src matlab
|        0 |          0 | 0.0015776 |  4.535 | 781.81 | 7476.8 | 0 |
| 5.22e-08 | 0.00017443 |   0.45058 | 81.647 | 1519.1 | 7476.8 | 0 |
#+end_src

Now let's define our error function:
#+begin_src matlab :session :exports code :results none
syms s;
vin_to_omega_sym = poly2sym(cell2mat(num),s)/poly2sym(cell2mat(den),s);
% ramp input
R = 1/s^2;

error_func = R*(1 - vin_to_omega_sym);
#+end_src

Let's take the limit of our error function:
#+begin_src matlab :session :exports both :results code
ans = limit(s*error_func, s, 0)
#+end_src

#+RESULTS:
#+begin_src matlab
0.098612
#+end_src




#+begin_comment
\begin{align*}
\frac{I_m(s)}{I_\text{in}(s)}
&=
\frac
{P(s)E(s)}
{1 + E(s)\left(K_b M(s) K_t  + P(s)\right)} \\
&=
\left[\frac{K_{vp} s + K_{vi}}{s}\right]
\left[\frac{1}{L_a s + R_a}\right]
\frac
{1}
{1 + E(s)\left(K_b M(s) K_t  + P(s)\right)} \\
&=
\left[
    \frac{K_{vp} s + K_{vi}}{L_a s^2 R_a s}
\right]
\frac
{1}
{1 + E(s)\left(K_b M(s) K_t  + P(s)\right)} \\
&=
\left[
    \frac{K_{vp} s + K_{vi}}{L_a s^2 R_a s}
\right]
\frac
{1}
{
  1
  + \left[\frac{1}{L_a s + R_a}\right]
  \left(K_b K_t
    \left[\frac{1}{J_\text{eq} s + B}\right]
    + \left[\frac{K_{vp} s + K_{vi}}{s}\right]
  \right)
} \\
&=
\left[
    \frac{K_{vp} s + K_{vi}}{L_a s^2 R_a s}
\right]
\frac
{1}
{
  1
  + \left[
    \frac
    {K_b K_t}
    {
      L_a J_\text{eq} s^2
      + (L_a B + R_a J_\text{eq}) s
      + R_a B
    }
  \right]
  + \left[
    \frac
    {K_{vp} s + K_{vi}}
    {
      L_a s^2 + R_a s
    }
  \right]
} \\
&=
\left[
    \frac{K_{vp} s + K_{vi}}{L_a s^2 R_a s}
\right]
\frac
{1}
{
  1
  + \frac
  {
    [K_b K_t(L_a s^2 + R_a s)]
    + [(K_{vp} s + K_{vi})
    (
      L_a J_\text{eq} s^2
      + (L_a B + R_a J_\text{eq}) s
      + R_a B
    )]
  }
  {
    L_a^2 J_\text{eq} s^4
    + (L_a J_\text{eq} R_a + (L_a B + R_a J_\text{eq})L_a) s^3
    + ((L_a B + R_a J_\text{eq})R_a + R_a B L_a) s^2
    + R_a^2 B s
  }
} \\
&=
\left[
    \frac{K_{vp} s + K_{vi}}{L_a s^2 R_a s}
\right] \\
& \frac
{1}
{
  1
  + \frac
  {
    [K_b K_t L_a s^2 + K_b K_t R_a s]
    +
    [
      K_{vp} L_a J_\text{eq} s^3
      + (K_{vp}(L_a B + R_a J_\text{eq}) + K_{vi} L_a J_\text{eq}) s^2
      + (K_{vp} R_a B + K_{vi}(L_a B + R_a J_\text{eq})) s
      + K_{vi} R_a B
    ]
  }
  {
    L_a^2 J_\text{eq} s^4
    + (L_a J_\text{eq} R_a + (L_a B + R_a J_\text{eq})L_a) s^3
    + ((L_a B + R_a J_\text{eq})R_a + R_a B L_a) s^2
    + R_a^2 B s
  }
} \\
&=
\left[
    \frac{K_{vp} s + K_{vi}}{L_a s^2 R_a s}
\right] \\
& \frac
{1}
{
  1
  + \frac
  {
    K_{vp} L_a J_\text{eq} s^3
    + (K_{vp}(L_a B + R_a J_\text{eq}) + K_{vi} L_a J_\text{eq} + K_b K_t L_a) s^2
    + (K_{vp} R_a B + K_{vi}(L_a B + R_a J_\text{eq}) + K_b K_t R_a) s
    + K_{vi} R_a B
  }
  {
    L_a^2 J_\text{eq} s^4
    + (L_a J_\text{eq} R_a + (L_a B + R_a J_\text{eq}) L_a) s^3
    + ((L_a B + R_a J_\text{eq})R_a + R_a B L_a) s^2
    + R_a^2 B s
  }
} \\
\end{align*}


Let's first expand our existing expression for $\frac{\omega(s)}{V_\text{in}(s)}$.
\begin{align*}
\frac{\omega(s)}{V_\text{in}(s)}
&=
K_t M(s)
S_g
\frac
{P(s)E(s)}
{1 + E(s)\left(K_b M(s) K_t  + P(s)\right)} \\
&=
S_g K_t
\left[\frac{1}{J_\text{eq} s + B}\right]
\left[\frac{K_{vp} s + K_{vi}}{s}\right]
\left[\frac{1}{L_a s + R_a}\right]
\frac
{1}
{1 + E(s)\left(K_b M(s) K_t  + P(s)\right)} \\
&=
S_g K_t
\left[
    \frac
    {K_{vp} s + K_{vi}}
    {
        J_\text{eq}L_a s^3
        + (J_\text{eq} R_a + B L_a)s^2
        B R_a s
    }
\right]
\frac
{1}
{
  1
  + \left[\frac{1}{L_a s + R_a}\right]
  \left(
    K_b K_t
    \left[\frac{1}{J_\text{eq} s + B}\right]
    + \left[\frac{K_{vp} s + K_{vi}}{s}\right]
  \right)} \\
\end{align*}
#+end_comment



** Based on your observations, draw a simplified (reduced) block diagram of the ball screw feed drive system (which reasonably represents frequencies up to 1000 [rad/s]).
#+BEGIN_SRC matlab :session :exports none :results none :eval never-export
simulink
#+END_SRC

#+BEGIN_SRC matlab :session :exports results :results file
open_system('simplified');
print -dsvg -s 'simplified.svg';
ans = 'simplified.svg'
#+END_SRC

#+RESULTS:
[[file:simplified.svg]]

Let's create this system:
#+begin_src matlab :session :exports code :results none
vin_to_omega_simp = K_t*M*S_g;
#+end_src

We can verify that this simplified system closely represents the original system by looking at the response plots:
#+begin_src matlab :session :exports both :results file
f_name = 'step4.svg'
f = figure('visible', 'off', ...
           'Position', [0 0 600 300]);
step(vin_to_omega_simp, vin_to_omega);
l = legend('Simplified', 'Original', 'Location', 'SouthEast');
set(l, 'color', 'none', 'edgecolor', 'none');
saveas(f, f_name);
ans = f_name
#+end_src

#+RESULTS:
[[file:step4.svg]]

#+begin_src matlab :session :exports both :results file
f_name = 'bode4.svg'
f = figure('visible', 'off');
bode(vin_to_omega_simp, vin_to_omega, {0, 1000});
bode_h = findall(f, 'type', 'axes');
l = legend(bode_h(3), 'Simplified', 'Original');
set(l, 'color', 'none', 'edgecolor', 'none');
saveas(f, f_name);
ans = f_name
#+end_src

#+RESULTS:
[[file:bode4.svg]]

As can be seen, the simplified system closely represents the original system.
